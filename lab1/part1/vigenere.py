#!/usr/bin/env python3

"""
Encrypt or decrypt the variant of Vigenère cipher shown in part 1 of lab 1.
"""

# ------------------------------- MODULE INFO ---------------------------------
__all__ = []
# ------------------------------- MODULE INFO ---------------------------------

# --------------------------------- MODULES -----------------------------------
import argparse
# --------------------------------- MODULES -----------------------------------

# -------------------------------- FUNCTIONS ----------------------------------
# Match mapping indexes to fit the range for platintext and key characters
mapping = (
    (0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe),
    (0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0),
    (0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7),
    (0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa),
    (0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4),
    (0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3),
    (0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1),
    (0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf),
    (0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2),
    (0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5),
    (0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb),
    (0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6),
    (0x9, 0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8),
    (0xd, 0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9),
    (0xc, 0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd),
    (0xe, 0xf, 0x7, 0x6, 0x4, 0x5, 0x1, 0x0, 0x2, 0x3, 0xb, 0xa, 0x8, 0x9, 0xd, 0xc)
)


def vigenere_encrypt(clear_text_file: str, cipher_text_file: str, key: str):
    pass


def vigenere_decrypt(clear_text_file: str, cipher_text_file: str, key: str):
    pass


def main():
    cli_description = "Encrypt/decrypt a file with the Vigenère cipher"
    parser = argparse.ArgumentParser(description=cli_description)
    group = parser.add_mutually_exclusive_group()

    parser.add_argument("file",
                        type=str,
                        nargs="+",
                        help="file to be encrypted/decrypted")
    group.add_argument("-d",
                       "--decrypt",
                       type=str,
                       required=False,
                       help="file name of the decrypted output")
    group.add_argument("-e",
                       "--encrypt",
                       type=str,
                       required=False,
                       help="file name of the encrypted output")
    parser.add_argument("-k",
                        "--key",
                        type=str,
                        required=False,
                        help="key to encrypt/decrypt the Vigenère variant")
    args = parser.parse_args()

    if args.decrypt:
        print("Dncrypted output is " + args.decrypt)
    elif args.encrypt:
        print("Encrypted output is " + args.encrypt)
    # List all the non-private attributes
    # for attr in filter(lambda attr: not attr.startswith("_"), dir(args)):
    #     if getattr(args, attr):
    #         print(getattr(args, attr))

if __name__ == "__main__":
    main()
# -------------------------------- FUNCTIONS ----------------------------------
